{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Django Project","text":"<p>This is the documentation for My Django Project.</p> <ul> <li>Guide</li> <li>API Reference</li> </ul>"},{"location":"guide/","title":"User Guide","text":"<p>This guide will help you get started with My Django Project.</p>"},{"location":"guide/#installation","title":"Installation","text":"<p>Instructions for installation.</p>"},{"location":"guide/#usage","title":"Usage","text":"<p>Instructions for usage.</p>"},{"location":"api/models/","title":"Models Reference","text":"<p>               Bases: <code>Model</code></p> Source code in <code>todo/models.py</code> <pre><code>class ToDo(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True, null=True)\n    is_completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n</code></pre>"},{"location":"api/serializers/","title":"Serializer Reference","text":""},{"location":"api/serializers/#todoserializer","title":"ToDoSerializer","text":"<p>               Bases: <code>ModelSerializer</code></p> Source code in <code>todo/serializers.py</code> <pre><code>class ToDoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ToDo\n        fields = ['id', 'title', 'description', 'is_completed', 'created_at', 'updated_at']\n</code></pre>"},{"location":"api/views/","title":"Views Reference","text":""},{"location":"api/views/#myview","title":"MyView","text":"<p>               Bases: <code>ModelViewSet</code></p> Source code in <code>todo/views.py</code> <pre><code>class ToDoViewSet(viewsets.ModelViewSet):\n    queryset = ToDo.objects.all().order_by('-created_at')\n    serializer_class = ToDoSerializer\n\n    # Add custom action to mark ToDo as completed asynchronously\n    @action(detail=True, methods=['get','post', 'put'])\n    def mark_completed(self, request, pk=None):\n        todo = self.get_object()  # Retrieve the specific ToDo item\n        if todo.is_completed:\n            return Response({\"detail\": \"This ToDo is already completed.\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Trigger the asynchronous task to mark it as completed\n        complete_todo_later(todo.id)\n\n        return Response({\"detail\": \"The task to complete the ToDo is running in the background.\"}, status=status.HTTP_202_ACCEPTED)\n</code></pre>"}]}